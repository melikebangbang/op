<!doctype html>
<html>
<head>
<meta charset="utf-8" />
<title>Pixel Racer - Downloadable</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
<style>
  html, body {
    margin:0; padding:0; height:100%; overflow:hidden;
    background:#111; font-family:monospace; color:#ddd;
  }
  canvas {
    display:block; margin:0 auto;
    background:#000; image-rendering: pixelated;
    touch-action: none; /* prevent default gestures */
  }
  #ui {
    position:absolute; top:10px; left:50%;
    transform:translateX(-50%);
    display:flex; justify-content:space-between;
    width:90%; max-width:720px; color:#bfefff; z-index:10;
  }
  #ui button {
    background:#222; color:#fff; border:1px solid #444;
    padding:6px 10px; border-radius:6px; cursor:pointer;
  }
  #controls {
    position:absolute; bottom:10px; left:50%;
    transform:translateX(-50%);
    display:flex; gap:20px; z-index:10;
  }
  #controls button {
    width:60px; height:60px; font-size:20px;
    border-radius:50%; background:#222; color:#fff; border:1px solid #444;
  }
</style>
</head>
<body>

<div id="ui">
  <div>Score: <span id="score">0</span> | Gear: <span id="gear">1</span> | Level: <span id="level">1</span></div>
  <button id="restart">Restart</button>
</div>

<div id="controls">
  <button id="left">◀</button>
  <button id="up">▲</button>
  <button id="down">▼</button>
  <button id="right">▶</button>
</div>

<canvas id="game"></canvas>

<script>
(() => {
  const canvas = document.getElementById('game');
  const ctx = canvas.getContext('2d', { alpha: false });
  const W = 720, H = 480;
  canvas.width = W; canvas.height = H;

  function resize() {
    const scale = Math.min(window.innerWidth / W, window.innerHeight / H);
    canvas.style.width = (W * scale) + 'px';
    canvas.style.height = (H * scale) + 'px';
  }
  window.addEventListener('resize', resize);
  resize();

  let keys = {}, running = true, score = 0, level = 1;
  let speed = 0, carX = W/2, carY = H-90, carW=36, carH=60;
  let obstacles=[], spawnTimer=0, spawnInterval=0.9, last=performance.now(), gear=1;

  const maxSpeed=700, accel=1200, drag=500, steerSpeed=220;
  const colors = {road:'#111', lane:'#222', grass:'#073c16', car:'#f0b400', wheel:'#332f2a', obstacle:'#9b2b2b'};

  function reset(){
    score=0; speed=0; carX=W/2; obstacles=[]; spawnTimer=0; spawnInterval=0.9;
    last=performance.now(); running=true; gear=1; level=1;
    document.getElementById('level').innerText = level;
  }

  function pfill(x,y,w,h,c){ ctx.fillStyle=c; ctx.fillRect(Math.round(x),Math.round(y),Math.round(w),Math.round(h)); }

  function drawBackground(){
    ctx.fillStyle = colors.grass; ctx.fillRect(0,0,80,H); ctx.fillRect(W-80,0,80,H);
    ctx.fillStyle = colors.road; ctx.fillRect(80,0,W-160,H);
    ctx.fillStyle = colors.lane; const laneX=[W/2-40,W/2+8];
    for(let x of laneX) for(let y=-((score*0.2)%40); y<H; y+=40) ctx.fillRect(x,y,12,24);
  }

  function drawCar(){
    const cx=carX, cy=carY;
    pfill(cx-18, cy-28, 36,56, colors.car);
    pfill(cx-12, cy-40, 24,12, '#ffcf66');
    pfill(cx-20, cy+24,8,8, colors.wheel);
    pfill(cx+12, cy+24,8,8, colors.wheel);
    pfill(cx-2, cy-10,4,20,'#fff');
  }

  function spawnObstacle(){
    const lanePositions=[W/2-40,W/2+8,W/2-100,W/2+60];
    const x=lanePositions[Math.floor(Math.random()*lanePositions.length)] + (Math.random()-0.5)*30;
    const y=-36, w=36, h=36;
    obstacles.push({x,y,w,h,speed:speed*0.5 + 70 + Math.random()*120});
  }

  function update(dt){
    if(!running) return;
    if(keys.ArrowUp||keys.up) speed+=accel*dt; else speed-=drag*dt;
    if(keys.ArrowDown||keys.down) speed-=accel*dt*1.2;
    speed=Math.max(0,Math.min(maxSpeed,speed));
    if(keys.ArrowLeft||keys.left) carX -= steerSpeed*dt*Math.max(0.25,speed/maxSpeed+0.25);
    if(keys.ArrowRight||keys.right) carX += steerSpeed*dt*Math.max(0.25,speed/maxSpeed+0.25);
    carX=Math.max(100+carW/2,Math.min(W-100-carW/2,carX));

    spawnTimer+=dt;
    if(spawnTimer>spawnInterval){ spawnTimer=0; spawnInterval=Math.max(0.45,0.9-Math.min(0.5,score/400)); spawnObstacle(); }

    for(let i=obstacles.length-1;i>=0;i--){
      let o=obstacles[i]; o.y+=(o.speed+speed*0.6)*dt;
      if(o.y+o.h>carY-carH/2 && o.y<carY+carH/2 && Math.abs(o.x-carX)<(o.w/2+carW/2-6)) running=false;
      if(o.y>H+100) obstacles.splice(i,1);
    }

    score+=speed*dt*0.02;
    gear=Math.min(6,1+Math.floor(speed/120));
    const newLevel=Math.floor(score/1000)+1;
    if(newLevel>level){ level=newLevel; spawnInterval=Math.max(0.3, spawnInterval-0.1); document.getElementById('level').innerText=level; }
  }

  function drawObstacles(){ for(let o of obstacles){ pfill(o.x-o.w/2,o.y-o.h/2,o.w,o.h,colors.obstacle); pfill(o.x-8,o.y-o.h/2+6,16,8,'#5b1010'); } }

  function drawHUD(){
    if(!running){
      ctx.fillStyle='rgba(0,0,0,0.6)';
      ctx.fillRect(W/2-220,H/2-60,440,120);
      ctx.fillStyle='#ff7b7b';
      ctx.font='24px monospace'; ctx.textAlign='center';
      ctx.fillText('Crashed!',W/2,H/2-6);
      ctx.fillStyle='#ddd'; ctx.font='14px monospace';
      ctx.fillText('Press Restart to try again',W/2,H/2+18);
      ctx.textAlign='start';
    }
  }

  function render(){ drawBackground(); drawObstacles(); drawCar(); drawHUD(); }

  function loop(now){
    const dt=Math.min(0.05,(now-last)/1000); last=now;
    update(dt);
    ctx.fillStyle='#000'; ctx.fillRect(0,0,W,H);
    render();
    document.getElementById('score').innerText=Math.floor(score);
    document.getElementById('gear').innerText=gear;
    requestAnimationFrame(loop);
  }

  window.addEventListener('keydown',e=>{ keys[e.key]=true; if(e.key==='p'||e.key==='P'){ running=!running; last=performance.now(); } });
  window.addEventListener('keyup',e=>keys[e.key]=false);
  document.getElementById('restart').addEventListener('click',reset);

  // Mobile touch controls
  const controlMap = {left:'ArrowLeft',up:'ArrowUp',down:'ArrowDown',right:'ArrowRight'};
  for(let id in controlMap){
    const btn = document.getElementById(id);
    btn.addEventListener('touchstart', e=>{ e.preventDefault(); keys[controlMap[id]]=true; });
    btn.addEventListener('touchend', e=>{ e.preventDefault(); keys[controlMap[id]]=false; });
  }

  reset();
  requestAnimationFrame(loop);
})();
</script>
</body>
</html>
